/// <reference path="../src/interfaces/vendors.d.ts" />
import { Address } from "./Address";
import { BitcoinCash } from "./BitcoinCash";
import { BitDB } from "./BitDB";
import { Block } from "./Block";
import { Blockchain } from "./Blockchain";
import { CashAccounts } from "./CashAccounts";
import { Control } from "./Control";
import { Crypto } from "./Crypto";
import { ECPair } from "./ECPair";
import { Generating } from "./Generating";
import { HDNode } from "./HDNode";
import { IConfig } from "./interfaces/BITBOXInterfaces";
import { Mining } from "./Mining";
import { Mnemonic } from "./Mnemonic";
import { Price } from "./Price";
import { RawTransactions } from "./RawTransactions";
import { Schnorr } from "./Schnorr";
import { Script } from "./Script";
import { Transaction } from "./Transaction";
import { TransactionBuilder } from "./TransactionBuilder";
import { Util } from "./Util";
export declare const WS_URL = "wss://ws.bitcoin.com";
export declare const TWS_URL = "wss://tws.bitcoin.com";
export declare const BITSOCKET_URL = "https://bitsocket.bch.sx";
export declare const TBITSOCKET_URL = "https://tbitsocket.bitcoin.com";
export declare const REST_URL = "https://rest.bitcoin.com/v2/";
export declare const TREST_URL = "https://trest.bitcoin.com/v2/";
export declare const BITDB_URL = "https://bitdb.bitcoin.com/";
export declare const TBITDB_URL = "https://tbitdb.bitcoin.com/";
export declare class BITBOX {
    restURL: string;
    bitdbURL: string;
    wsURL: string;
    Address: Address;
    BitcoinCash: BitcoinCash;
    BitDB: BitDB;
    Block: Block;
    Blockchain: Blockchain;
    CashAccounts: CashAccounts;
    Control: Control;
    Crypto: Crypto;
    ECPair: ECPair;
    Generating: Generating;
    HDNode: HDNode;
    Mining: Mining;
    Mnemonic: Mnemonic;
    Price: Price;
    RawTransactions: RawTransactions;
    Script: Script;
    Transaction: Transaction;
    TransactionBuilder: {
        new (network?: string): TransactionBuilder;
    };
    Util: Util;
    Socket: any;
    Schnorr: Schnorr;
    constructor(config?: IConfig);
}
